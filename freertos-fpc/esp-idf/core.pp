unit core;

{$include sdkconfig.Inc}

interface

uses
  hal, core_isa, tie;

const
{$if defined(XCHAL_HAVE_BE)}
  XCHAL_HAVE_LE = 0;
  XCHAL_MEMORY_ORDER = XTHAL_BIGENDIAN;
{$else}
  XCHAL_HAVE_LE = 1;
  XCHAL_MEMORY_ORDER = XTHAL_LITTLEENDIAN;
{$endif}

//#define _XCHAL_INTLEVEL_MASK(n)    XCHAL_INTLEVEL ## n ## _MASK
//#define XCHAL_INTLEVEL_MASK(n)    _XCHAL_INTLEVEL_MASK(n)    // n = 0 .. 15
//#define _XCHAL_INTLEVEL_ANDBELOWMASK(n)  XCHAL_INTLEVEL ## n ## _ANDBELOW_MASK
//#define XCHAL_INTLEVEL_ANDBELOW_MASK(n)  _XCHAL_INTLEVEL_ANDBELOWMASK(n)  // n = 0 .. 15
//#define _XCHAL_INTLEVEL_NUM(n)    XCHAL_INTLEVEL ## n ## _NUM
//#define XCHAL_INTLEVEL_NUM(n)    _XCHAL_INTLEVEL_NUM(n)    // n = 0 .. 15
//#define _XCHAL_INT_LEVEL(n)    XCHAL_INT ## n ## _LEVEL
//#define XCHAL_INT_LEVEL(n)    _XCHAL_INT_LEVEL(n)    // n = 0 .. 31
//#define _XCHAL_INT_TYPE(n)    XCHAL_INT ## n ## _TYPE
//#define XCHAL_INT_TYPE(n)    _XCHAL_INT_TYPE(n)    // n = 0 .. 31
//#define _XCHAL_TIMER_INTERRUPT(n)  XCHAL_TIMER ## n ## _INTERRUPT
//#define XCHAL_TIMER_INTERRUPT(n)  _XCHAL_TIMER_INTERRUPT(n)  // n = 0 .. 3

type
  TArray16Uint32 = array[0..15] of uint32;

const
  XCHAL_HAVE_HIGHLEVEL_INTERRUPTS = XCHAL_HAVE_HIGHPRI_INTERRUPTS;
  XCHAL_NUM_LOWPRI_LEVELS = 1;
  XCHAL_FIRST_HIGHPRI_LEVEL = XCHAL_NUM_LOWPRI_LEVELS + 1;

  XCHAL_INTLEVEL0_MASK = $00000000;
  XCHAL_INTLEVEL8_MASK = $00000000;
  XCHAL_INTLEVEL9_MASK = $00000000;
  XCHAL_INTLEVEL10_MASK = $00000000;
  XCHAL_INTLEVEL11_MASK = $00000000;
  XCHAL_INTLEVEL12_MASK = $00000000;
  XCHAL_INTLEVEL13_MASK = $00000000;
  XCHAL_INTLEVEL14_MASK = $00000000;
  XCHAL_INTLEVEL15_MASK = $00000000;

  XCHAL_INTLEVEL_MASKS: TArray16Uint32 = (XCHAL_INTLEVEL0_MASK
        ,  XCHAL_INTLEVEL1_MASK
        ,  XCHAL_INTLEVEL2_MASK
        ,  XCHAL_INTLEVEL3_MASK
        ,  XCHAL_INTLEVEL4_MASK
        ,  XCHAL_INTLEVEL5_MASK
        ,  XCHAL_INTLEVEL6_MASK
        ,  XCHAL_INTLEVEL7_MASK
        ,  XCHAL_INTLEVEL8_MASK
        ,  XCHAL_INTLEVEL9_MASK
        ,  XCHAL_INTLEVEL10_MASK
        ,  XCHAL_INTLEVEL11_MASK
        ,  XCHAL_INTLEVEL12_MASK
        ,  XCHAL_INTLEVEL13_MASK
        ,  XCHAL_INTLEVEL14_MASK
        ,  XCHAL_INTLEVEL15_MASK);

  XCHAL_INTLEVEL0_ANDBELOW_MASK = $00000000;
  XCHAL_INTLEVEL8_ANDBELOW_MASK = XCHAL_INTLEVEL7_ANDBELOW_MASK;
  XCHAL_INTLEVEL9_ANDBELOW_MASK = XCHAL_INTLEVEL7_ANDBELOW_MASK;
  XCHAL_INTLEVEL10_ANDBELOW_MASK = XCHAL_INTLEVEL7_ANDBELOW_MASK;
  XCHAL_INTLEVEL11_ANDBELOW_MASK = XCHAL_INTLEVEL7_ANDBELOW_MASK;
  XCHAL_INTLEVEL12_ANDBELOW_MASK = XCHAL_INTLEVEL7_ANDBELOW_MASK;
  XCHAL_INTLEVEL13_ANDBELOW_MASK = XCHAL_INTLEVEL7_ANDBELOW_MASK;
  XCHAL_INTLEVEL14_ANDBELOW_MASK = XCHAL_INTLEVEL7_ANDBELOW_MASK;
  XCHAL_INTLEVEL15_ANDBELOW_MASK = XCHAL_INTLEVEL7_ANDBELOW_MASK;
  XCHAL_LOWPRI_MASK = XCHAL_INTLEVEL1_ANDBELOW_MASK;

  XCHAL_INTLEVEL_ANDBELOW_MASKS: TArray16Uint32 = (XCHAL_INTLEVEL0_ANDBELOW_MASK
        ,  XCHAL_INTLEVEL1_ANDBELOW_MASK
        ,  XCHAL_INTLEVEL2_ANDBELOW_MASK
        ,  XCHAL_INTLEVEL3_ANDBELOW_MASK
        ,  XCHAL_INTLEVEL4_ANDBELOW_MASK
        ,  XCHAL_INTLEVEL5_ANDBELOW_MASK
        ,  XCHAL_INTLEVEL6_ANDBELOW_MASK
        ,  XCHAL_INTLEVEL7_ANDBELOW_MASK
        ,  XCHAL_INTLEVEL8_ANDBELOW_MASK
        ,  XCHAL_INTLEVEL9_ANDBELOW_MASK
        ,  XCHAL_INTLEVEL10_ANDBELOW_MASK
        ,  XCHAL_INTLEVEL11_ANDBELOW_MASK
        ,  XCHAL_INTLEVEL12_ANDBELOW_MASK
        ,  XCHAL_INTLEVEL13_ANDBELOW_MASK
        ,  XCHAL_INTLEVEL14_ANDBELOW_MASK
        ,  XCHAL_INTLEVEL15_ANDBELOW_MASK);

  //XCHAL_EXCM_MASK = XCHAL_INTLEVEL_ANDBELOW_MASKS[XCHAL_EXCM_LEVEL];
  XCHAL_EXCM_MASK = XCHAL_INTLEVEL3_ANDBELOW_MASK;

  XCHAL_INT_LEVELS: array[0..31] of uint32 = (XCHAL_INT0_LEVEL
        ,  XCHAL_INT1_LEVEL
        ,  XCHAL_INT2_LEVEL
        ,  XCHAL_INT3_LEVEL
        ,  XCHAL_INT4_LEVEL
        ,  XCHAL_INT5_LEVEL
        ,  XCHAL_INT6_LEVEL
        ,  XCHAL_INT7_LEVEL
        ,  XCHAL_INT8_LEVEL
        ,  XCHAL_INT9_LEVEL
        ,  XCHAL_INT10_LEVEL
        ,  XCHAL_INT11_LEVEL
        ,  XCHAL_INT12_LEVEL
        ,  XCHAL_INT13_LEVEL
        ,  XCHAL_INT14_LEVEL
        ,  XCHAL_INT15_LEVEL
        ,  XCHAL_INT16_LEVEL
        ,  XCHAL_INT17_LEVEL
        ,  XCHAL_INT18_LEVEL
        ,  XCHAL_INT19_LEVEL
        ,  XCHAL_INT20_LEVEL
        ,  XCHAL_INT21_LEVEL
        ,  XCHAL_INT22_LEVEL
        ,  XCHAL_INT23_LEVEL
        ,  XCHAL_INT24_LEVEL
        ,  XCHAL_INT25_LEVEL
        ,  XCHAL_INT26_LEVEL
        ,  XCHAL_INT27_LEVEL
        ,  XCHAL_INT28_LEVEL
        ,  XCHAL_INT29_LEVEL
        ,  XCHAL_INT30_LEVEL
        ,  XCHAL_INT31_LEVEL);

  //  Array of types of each possible interrupt:
  XCHAL_INT_TYPES: array[0..31] of uint32 = (XCHAL_INT0_TYPE
        ,  XCHAL_INT1_TYPE
        ,  XCHAL_INT2_TYPE
        ,  XCHAL_INT3_TYPE
        ,  XCHAL_INT4_TYPE
        ,  XCHAL_INT5_TYPE
        ,  XCHAL_INT6_TYPE
        ,  XCHAL_INT7_TYPE
        ,  XCHAL_INT8_TYPE
        ,  XCHAL_INT9_TYPE
        ,  XCHAL_INT10_TYPE
        ,  XCHAL_INT11_TYPE
        ,  XCHAL_INT12_TYPE
        ,  XCHAL_INT13_TYPE
        ,  XCHAL_INT14_TYPE
        ,  XCHAL_INT15_TYPE
        ,  XCHAL_INT16_TYPE
        ,  XCHAL_INT17_TYPE
        ,  XCHAL_INT18_TYPE
        ,  XCHAL_INT19_TYPE
        ,  XCHAL_INT20_TYPE
        ,  XCHAL_INT21_TYPE
        ,  XCHAL_INT22_TYPE
        ,  XCHAL_INT23_TYPE
        ,  XCHAL_INT24_TYPE
        ,  XCHAL_INT25_TYPE
        ,  XCHAL_INT26_TYPE
        ,  XCHAL_INT27_TYPE
        ,  XCHAL_INT28_TYPE
        ,  XCHAL_INT29_TYPE
        ,  XCHAL_INT30_TYPE
        ,  XCHAL_INT31_TYPE);

  XCHAL_INTTYPE_MASKS: array[0..6] of uint32 = (XCHAL_INTTYPE_MASK_UNCONFIGURED
        ,  XCHAL_INTTYPE_MASK_SOFTWARE
        ,  XCHAL_INTTYPE_MASK_EXTERN_EDGE
        ,  XCHAL_INTTYPE_MASK_EXTERN_LEVEL
        ,  XCHAL_INTTYPE_MASK_TIMER
        ,  XCHAL_INTTYPE_MASK_NMI
        ,  XCHAL_INTTYPE_MASK_WRITE_ERROR);

  XCHAL_INTCLEARABLE_MASK =
    (XCHAL_INTTYPE_MASK_SOFTWARE + XCHAL_INTTYPE_MASK_EXTERN_EDGE +
    XCHAL_INTTYPE_MASK_WRITE_ERROR);
  XCHAL_INTSETTABLE_MASK = XCHAL_INTTYPE_MASK_SOFTWARE;

  XCHAL_TIMER_INTERRUPTS: array[0..3] of uint32 = (XCHAL_TIMER0_INTERRUPT
        ,  XCHAL_TIMER1_INTERRUPT
        ,  XCHAL_TIMER2_INTERRUPT
        ,  uint32(XCHAL_TIMER3_INTERRUPT));

{$if XCHAL_NUM_INTERRUPTS = 0}
  // define XCHAL_INT0_LEVEL    0
  // define XCHAL_INT0_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 1}
  // define XCHAL_INT1_LEVEL    0
  // define XCHAL_INT1_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 2}
  // define XCHAL_INT2_LEVEL    0
  // define XCHAL_INT2_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 3}
  // define XCHAL_INT3_LEVEL    0
  // define XCHAL_INT3_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 4}
  // define XCHAL_INT4_LEVEL    0
  // define XCHAL_INT4_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 5}
  // define XCHAL_INT5_LEVEL    0
  // define XCHAL_INT5_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 6}
  // define XCHAL_INT6_LEVEL    0
  // define XCHAL_INT6_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 7}
  // define XCHAL_INT7_LEVEL    0
  // define XCHAL_INT7_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 8}
  // define XCHAL_INT8_LEVEL    0
  // define XCHAL_INT8_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 9}
  // define XCHAL_INT9_LEVEL    0
  // define XCHAL_INT9_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 10}
  // define XCHAL_INT10_LEVEL    0
  // define XCHAL_INT10_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 11}
  // define XCHAL_INT11_LEVEL    0
  // define XCHAL_INT11_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 12}
  // define XCHAL_INT12_LEVEL    0
  // define XCHAL_INT12_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 13}
  // define XCHAL_INT13_LEVEL    0
  // define XCHAL_INT13_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 14}
  // define XCHAL_INT14_LEVEL    0
  // define XCHAL_INT14_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 15}
  // define XCHAL_INT15_LEVEL    0
  // define XCHAL_INT15_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 16}
  // define XCHAL_INT16_LEVEL    0
  // define XCHAL_INT16_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 17}
  // define XCHAL_INT17_LEVEL    0
  // define XCHAL_INT17_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 18}
  // define XCHAL_INT18_LEVEL    0
  // define XCHAL_INT18_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 19}
  // define XCHAL_INT19_LEVEL    0
  // define XCHAL_INT19_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 20}
  // define XCHAL_INT20_LEVEL    0
  // define XCHAL_INT20_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 21}
  // define XCHAL_INT21_LEVEL    0
  // define XCHAL_INT21_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 22}
  // define XCHAL_INT22_LEVEL    0
  // define XCHAL_INT22_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 23}
  // define XCHAL_INT23_LEVEL    0
  // define XCHAL_INT23_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 24}
  // define XCHAL_INT24_LEVEL    0
  // define XCHAL_INT24_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 25}
  // define XCHAL_INT25_LEVEL    0
  // define XCHAL_INT25_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 26}
  // define XCHAL_INT26_LEVEL    0
  // define XCHAL_INT26_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 27}
  // define XCHAL_INT27_LEVEL    0
  // define XCHAL_INT27_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 28}
  // define XCHAL_INT28_LEVEL    0
  // define XCHAL_INT28_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 29}
  // define XCHAL_INT29_LEVEL    0
  // define XCHAL_INT29_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 30}
  // define XCHAL_INT30_LEVEL    0
  // define XCHAL_INT30_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}
{$if XCHAL_NUM_INTERRUPTS <= 31}
  // define XCHAL_INT31_LEVEL    0
  // define XCHAL_INT31_TYPE    XTHAL_INTTYPE_UNCONFIGURED
{$endif}

  XCHAL_EXTINT0_MASK = (1 shl XCHAL_EXTINT0_NUM);
  XCHAL_EXTINT0_LEVEL = XCHAL_INT0_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT0_NUM);
  XCHAL_EXTINT1_MASK = (1 shl XCHAL_EXTINT1_NUM);
  XCHAL_EXTINT1_LEVEL = XCHAL_INT1_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT1_NUM);
  XCHAL_EXTINT2_MASK = (1 shl XCHAL_EXTINT2_NUM);
  XCHAL_EXTINT2_LEVEL = XCHAL_INT2_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT2_NUM);
  XCHAL_EXTINT3_MASK = (1 shl XCHAL_EXTINT3_NUM);
  XCHAL_EXTINT3_LEVEL = XCHAL_INT3_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT3_NUM);
  XCHAL_EXTINT4_MASK = (1 shl XCHAL_EXTINT4_NUM);
  XCHAL_EXTINT4_LEVEL = XCHAL_INT4_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT4_NUM);
  XCHAL_EXTINT5_MASK = (1 shl XCHAL_EXTINT5_NUM);
  XCHAL_EXTINT5_LEVEL = XCHAL_INT5_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT5_NUM);
  XCHAL_EXTINT6_MASK = (1 shl XCHAL_EXTINT6_NUM);
  XCHAL_EXTINT6_LEVEL = XCHAL_INT8_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT6_NUM);
  XCHAL_EXTINT7_MASK = (1 shl XCHAL_EXTINT7_NUM);
  XCHAL_EXTINT7_LEVEL = XCHAL_INT9_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT7_NUM);
  XCHAL_EXTINT8_MASK = (1 shl XCHAL_EXTINT8_NUM);
  XCHAL_EXTINT8_LEVEL = XCHAL_INT10_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT8_NUM);
  XCHAL_EXTINT9_MASK = (1 shl XCHAL_EXTINT9_NUM);
  XCHAL_EXTINT9_LEVEL = XCHAL_INT12_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT9_NUM);
  XCHAL_EXTINT10_MASK = (1 shl XCHAL_EXTINT10_NUM);
  XCHAL_EXTINT10_LEVEL = XCHAL_INT13_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT10_NUM);
  XCHAL_EXTINT11_MASK = (1 shl XCHAL_EXTINT11_NUM);
  XCHAL_EXTINT11_LEVEL = XCHAL_INT14_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT11_NUM);
  XCHAL_EXTINT12_MASK = (1 shl XCHAL_EXTINT12_NUM);
  XCHAL_EXTINT12_LEVEL = XCHAL_INT17_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT12_NUM);
  XCHAL_EXTINT13_MASK = (1 shl XCHAL_EXTINT13_NUM);
  XCHAL_EXTINT13_LEVEL = XCHAL_INT18_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT13_NUM);
  XCHAL_EXTINT14_MASK = (1 shl XCHAL_EXTINT14_NUM);
  XCHAL_EXTINT14_LEVEL = XCHAL_INT19_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT14_NUM);
  XCHAL_EXTINT15_MASK = (1 shl XCHAL_EXTINT15_NUM);
  XCHAL_EXTINT15_LEVEL = XCHAL_INT20_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT15_NUM);
  XCHAL_EXTINT16_MASK = (1 shl XCHAL_EXTINT16_NUM);
  XCHAL_EXTINT16_LEVEL = XCHAL_INT21_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT16_NUM);
  XCHAL_EXTINT17_MASK = (1 shl XCHAL_EXTINT17_NUM);
  XCHAL_EXTINT17_LEVEL = XCHAL_INT22_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT17_NUM);
  XCHAL_EXTINT18_MASK = (1 shl XCHAL_EXTINT18_NUM);
  XCHAL_EXTINT18_LEVEL = XCHAL_INT23_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT18_NUM);
  XCHAL_EXTINT19_MASK = (1 shl XCHAL_EXTINT19_NUM);
  XCHAL_EXTINT19_LEVEL = XCHAL_INT24_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT19_NUM);
  XCHAL_EXTINT20_MASK = (1 shl XCHAL_EXTINT20_NUM);
  XCHAL_EXTINT20_LEVEL = XCHAL_INT25_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT20_NUM);
  XCHAL_EXTINT21_MASK = (1 shl XCHAL_EXTINT21_NUM);
  XCHAL_EXTINT21_LEVEL = XCHAL_INT26_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT21_NUM);
  XCHAL_EXTINT22_MASK = (1 shl XCHAL_EXTINT22_NUM);
  XCHAL_EXTINT22_LEVEL = XCHAL_INT27_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT22_NUM);
  XCHAL_EXTINT23_MASK = (1 shl XCHAL_EXTINT23_NUM);
  XCHAL_EXTINT23_LEVEL = XCHAL_INT28_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT23_NUM);
  XCHAL_EXTINT24_MASK = (1 shl XCHAL_EXTINT24_NUM);
  XCHAL_EXTINT24_LEVEL = XCHAL_INT30_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT24_NUM);
  XCHAL_EXTINT25_MASK = (1 shl XCHAL_EXTINT25_NUM);
  XCHAL_EXTINT25_LEVEL = XCHAL_INT31_LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT25_NUM);
  // Cannot find definitions for below range

(*  XCHAL_EXTINT26_MASK = (1 shl XCHAL_EXTINT26_NUM);
  XCHAL_EXTINT26_LEVEL = XCHAL_INT ## n ## _LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT26_NUM);
  XCHAL_EXTINT27_MASK = (1 shl XCHAL_EXTINT27_NUM);
  XCHAL_EXTINT27_LEVEL = XCHAL_INT ## n ## _LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT27_NUM);
  XCHAL_EXTINT28_MASK = (1 shl XCHAL_EXTINT28_NUM);
  XCHAL_EXTINT28_LEVEL = XCHAL_INT ## n ## _LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT28_NUM);
  XCHAL_EXTINT29_MASK = (1 shl XCHAL_EXTINT29_NUM);
  XCHAL_EXTINT29_LEVEL = XCHAL_INT ## n ## _LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT29_NUM);
  XCHAL_EXTINT30_MASK = (1 shl XCHAL_EXTINT30_NUM);
  XCHAL_EXTINT30_LEVEL = XCHAL_INT ## n ## _LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT30_NUM);
  XCHAL_EXTINT31_MASK = (1 shl XCHAL_EXTINT31_NUM);
  XCHAL_EXTINT31_LEVEL = XCHAL_INT ## n ## _LEVEL; //XCHAL_INT_LEVEL(XCHAL_EXTINT31_NUM);
*)

  //  For backward compatibility ONLY -- DO NOT USE (will be removed in future release):
  XCHAL_HAVE_OLD_EXC_ARCH = XCHAL_HAVE_XEA1;
  // (DEPRECATED) 1 if old exception architecture (XEA1), 0 otherwise (eg. XEA2)
  XCHAL_HAVE_EXCM = XCHAL_HAVE_XEA2;
  // (DEPRECATED) 1 if PS.EXCM bit exists (currently equals XCHAL_HAVE_TLBS)
{$ifdef XCHAL_USER_VECTOR_VADDR}
  XCHAL_PROGRAMEXC_VECTOR_VADDR = XCHAL_USER_VECTOR_VADDR;
  XCHAL_USEREXC_VECTOR_VADDR = XCHAL_USER_VECTOR_VADDR;
{$endif}
{$ifdef XCHAL_USER_VECTOR_PADDR}
  // define XCHAL_PROGRAMEXC_VECTOR_PADDR  XCHAL_USER_VECTOR_PADDR
  // define XCHAL_USEREXC_VECTOR_PADDR  XCHAL_USER_VECTOR_PADDR
{$endif}
{$ifdef XCHAL_KERNEL_VECTOR_VADDR}
  // define XCHAL_STACKEDEXC_VECTOR_VADDR  XCHAL_KERNEL_VECTOR_VADDR
  // define XCHAL_KERNELEXC_VECTOR_VADDR  XCHAL_KERNEL_VECTOR_VADDR
{$endif}
{$ifdef XCHAL_KERNEL_VECTOR_PADDR}
  // define XCHAL_STACKEDEXC_VECTOR_PADDR  XCHAL_KERNEL_VECTOR_PADDR
  // define XCHAL_KERNELEXC_VECTOR_PADDR  XCHAL_KERNEL_VECTOR_PADDR
{$endif}

  //  Indexing macros:
  //#define _XCHAL_INTLEVEL_VECTOR_VADDR(n)    XCHAL_INTLEVEL ## n ## _VECTOR_VADDR
  //#define XCHAL_INTLEVEL_VECTOR_VADDR(n)    _XCHAL_INTLEVEL_VECTOR_VADDR(n)    // n = 0 .. 15

  XCHAL_EXCCAUSE_ILLEGAL_INSTRUCTION = 0;  // Illegal Instruction
  XCHAL_EXCCAUSE_SYSTEM_CALL = 1;  // System Call
  XCHAL_EXCCAUSE_INSTRUCTION_FETCH_ERROR = 2;  // Instruction Fetch Error
  XCHAL_EXCCAUSE_LOAD_STORE_ERROR = 3;  // Load Store Error
  XCHAL_EXCCAUSE_LEVEL1_INTERRUPT = 4;  // Level 1 Interrupt
  XCHAL_EXCCAUSE_ALLOCA = 5;  // Stack Extension Assist
  XCHAL_EXCCAUSE_INTEGER_DIVIDE_BY_ZERO = 6;  // Integer Divide by Zero
  XCHAL_EXCCAUSE_SPECULATION = 7;  // Speculation
  XCHAL_EXCCAUSE_PRIVILEGED = 8;  // Privileged Instruction
  XCHAL_EXCCAUSE_UNALIGNED = 9;  // Unaligned Load Store
  //10..15 reserved
  XCHAL_EXCCAUSE_ITLB_MISS = 16;  // ITlb Miss Exception
  XCHAL_EXCCAUSE_ITLB_MULTIHIT = 17;  // ITlb Mutltihit Exception
  XCHAL_EXCCAUSE_ITLB_PRIVILEGE = 18;  // ITlb Privilege Exception
  XCHAL_EXCCAUSE_ITLB_SIZE_RESTRICTION = 19;  // ITlb Size Restriction Exception
  XCHAL_EXCCAUSE_FETCH_CACHE_ATTRIBUTE = 20;  // Fetch Cache Attribute Exception
  //21..23 reserved
  XCHAL_EXCCAUSE_DTLB_MISS = 24;  // DTlb Miss Exception
  XCHAL_EXCCAUSE_DTLB_MULTIHIT = 25;  // DTlb Multihit Exception
  XCHAL_EXCCAUSE_DTLB_PRIVILEGE = 26;  // DTlb Privilege Exception
  XCHAL_EXCCAUSE_DTLB_SIZE_RESTRICTION = 27;  // DTlb Size Restriction Exception
  XCHAL_EXCCAUSE_LOAD_CACHE_ATTRIBUTE = 28;  // Load Cache Attribute Exception
  XCHAL_EXCCAUSE_STORE_CACHE_ATTRIBUTE = 29;  // Store Cache Attribute Exception
  //30..31 reserved
  XCHAL_EXCCAUSE_COPROCESSOR0_DISABLED = 32;  // Coprocessor 0 disabled
  XCHAL_EXCCAUSE_COPROCESSOR1_DISABLED = 33;  // Coprocessor 1 disabled
  XCHAL_EXCCAUSE_COPROCESSOR2_DISABLED = 34;  // Coprocessor 2 disabled
  XCHAL_EXCCAUSE_COPROCESSOR3_DISABLED = 35;  // Coprocessor 3 disabled
  XCHAL_EXCCAUSE_COPROCESSOR4_DISABLED = 36;  // Coprocessor 4 disabled
  XCHAL_EXCCAUSE_COPROCESSOR5_DISABLED = 37;  // Coprocessor 5 disabled
  XCHAL_EXCCAUSE_COPROCESSOR6_DISABLED = 38;  // Coprocessor 6 disabled
  XCHAL_EXCCAUSE_COPROCESSOR7_DISABLED = 39;  // Coprocessor 7 disabled
  //40..63 reserved
  XCHAL_DBREAKC_VALIDMASK = $C000003F;
  XCHAL_DBREAKC_MASK_BITS = 6;
  XCHAL_DBREAKC_MASK_NUM = 64;
  XCHAL_DBREAKC_MASK_SHIFT = 0;
  XCHAL_DBREAKC_MASK_MASK = $0000003F;
  XCHAL_DBREAKC_LOADBREAK_BITS = 1;
  XCHAL_DBREAKC_LOADBREAK_NUM = 2;
  XCHAL_DBREAKC_LOADBREAK_SHIFT = 30;
  XCHAL_DBREAKC_LOADBREAK_MASK = $40000000;
  XCHAL_DBREAKC_STOREBREAK_BITS = 1;
  XCHAL_DBREAKC_STOREBREAK_NUM = 2;
  XCHAL_DBREAKC_STOREBREAK_SHIFT = 31;
  XCHAL_DBREAKC_STOREBREAK_MASK = $80000000;
  XCHAL_PS_VALIDMASK = $00070F3F;
  XCHAL_PS_INTLEVEL_BITS = 4;
  XCHAL_PS_INTLEVEL_NUM = 16;
  XCHAL_PS_INTLEVEL_SHIFT = 0;
  XCHAL_PS_INTLEVEL_MASK = $0000000F;
  XCHAL_PS_EXCM_BITS = 1;
  XCHAL_PS_EXCM_NUM = 2;
  XCHAL_PS_EXCM_SHIFT = 4;
  XCHAL_PS_EXCM_MASK = $00000010;
  XCHAL_PS_UM_BITS = 1;
  XCHAL_PS_UM_NUM = 2;
  XCHAL_PS_UM_SHIFT = 5;
  XCHAL_PS_UM_MASK = $00000020;
  XCHAL_PS_RING_BITS = 2;
  XCHAL_PS_RING_NUM = 4;
  XCHAL_PS_RING_SHIFT = 6;
  XCHAL_PS_RING_MASK = $000000C0;
  XCHAL_PS_OWB_BITS = 4;
  XCHAL_PS_OWB_NUM = 16;
  XCHAL_PS_OWB_SHIFT = 8;
  XCHAL_PS_OWB_MASK = $00000F00;
  XCHAL_PS_CALLINC_BITS = 2;
  XCHAL_PS_CALLINC_NUM = 4;
  XCHAL_PS_CALLINC_SHIFT = 16;
  XCHAL_PS_CALLINC_MASK = $00030000;
  XCHAL_PS_WOE_BITS = 1;
  XCHAL_PS_WOE_NUM = 2;
  XCHAL_PS_WOE_SHIFT = 18;
  XCHAL_PS_WOE_MASK = $00040000;
  XCHAL_EXCCAUSE_VALIDMASK = $0000003F;
  XCHAL_EXCCAUSE_BITS = 6;
  XCHAL_EXCCAUSE_NUM = 64;
  XCHAL_EXCCAUSE_SHIFT = 0;
  XCHAL_EXCCAUSE_MASK = $0000003F;
  XCHAL_DEBUGCAUSE_VALIDMASK = $0000003F;
  XCHAL_DEBUGCAUSE_ICOUNT_BITS = 1;
  XCHAL_DEBUGCAUSE_ICOUNT_NUM = 2;
  XCHAL_DEBUGCAUSE_ICOUNT_SHIFT = 0;
  XCHAL_DEBUGCAUSE_ICOUNT_MASK = $00000001;
  XCHAL_DEBUGCAUSE_IBREAK_BITS = 1;
  XCHAL_DEBUGCAUSE_IBREAK_NUM = 2;
  XCHAL_DEBUGCAUSE_IBREAK_SHIFT = 1;
  XCHAL_DEBUGCAUSE_IBREAK_MASK = $00000002;
  XCHAL_DEBUGCAUSE_DBREAK_BITS = 1;
  XCHAL_DEBUGCAUSE_DBREAK_NUM = 2;
  XCHAL_DEBUGCAUSE_DBREAK_SHIFT = 2;
  XCHAL_DEBUGCAUSE_DBREAK_MASK = $00000004;
  XCHAL_DEBUGCAUSE_BREAK_BITS = 1;
  XCHAL_DEBUGCAUSE_BREAK_NUM = 2;
  XCHAL_DEBUGCAUSE_BREAK_SHIFT = 3;
  XCHAL_DEBUGCAUSE_BREAK_MASK = $00000008;
  XCHAL_DEBUGCAUSE_BREAKN_BITS = 1;
  XCHAL_DEBUGCAUSE_BREAKN_NUM = 2;
  XCHAL_DEBUGCAUSE_BREAKN_SHIFT = 4;
  XCHAL_DEBUGCAUSE_BREAKN_MASK = $00000010;
  XCHAL_DEBUGCAUSE_DEBUGINT_BITS = 1;
  XCHAL_DEBUGCAUSE_DEBUGINT_NUM = 2;
  XCHAL_DEBUGCAUSE_DEBUGINT_SHIFT = 5;
  XCHAL_DEBUGCAUSE_DEBUGINT_MASK = $00000020;
  XCHAL_NUM_IROM = XCHAL_NUM_INSTROM;  // (DEPRECATED)
  XCHAL_NUM_IRAM = XCHAL_NUM_INSTRAM;  // (DEPRECATED)
  XCHAL_NUM_DROM = XCHAL_NUM_DATAROM;  // (DEPRECATED)
  XCHAL_NUM_DRAM = XCHAL_NUM_DATARAM;  // (DEPRECATED)
  XCHAL_IROM0_VADDR = XCHAL_INSTROM0_VADDR;  // (DEPRECATED)
  XCHAL_IROM0_PADDR = XCHAL_INSTROM0_PADDR;  // (DEPRECATED)
  XCHAL_IROM0_SIZE = XCHAL_INSTROM0_SIZE;  // (DEPRECATED)
  //XCHAL_IROM1_VADDR = XCHAL_INSTROM1_VADDR;  // (DEPRECATED)
  //XCHAL_IROM1_PADDR = XCHAL_INSTROM1_PADDR;  // (DEPRECATED)
  //XCHAL_IROM1_SIZE = XCHAL_INSTROM1_SIZE;  // (DEPRECATED)
  XCHAL_IRAM0_VADDR = XCHAL_INSTRAM0_VADDR;  // (DEPRECATED)
  XCHAL_IRAM0_PADDR = XCHAL_INSTRAM0_PADDR;  // (DEPRECATED)
  XCHAL_IRAM0_SIZE = XCHAL_INSTRAM0_SIZE;  // (DEPRECATED)
  XCHAL_IRAM1_VADDR = XCHAL_INSTRAM1_VADDR;  // (DEPRECATED)
  XCHAL_IRAM1_PADDR = XCHAL_INSTRAM1_PADDR;  // (DEPRECATED)
  XCHAL_IRAM1_SIZE = XCHAL_INSTRAM1_SIZE;  // (DEPRECATED)
  XCHAL_DROM0_VADDR = XCHAL_DATAROM0_VADDR;  // (DEPRECATED)
  XCHAL_DROM0_PADDR = XCHAL_DATAROM0_PADDR;  // (DEPRECATED)
  XCHAL_DROM0_SIZE = XCHAL_DATAROM0_SIZE;  // (DEPRECATED)
  //XCHAL_DROM1_VADDR = XCHAL_DATAROM1_VADDR;  // (DEPRECATED)
  //XCHAL_DROM1_PADDR = XCHAL_DATAROM1_PADDR;  // (DEPRECATED)
  //XCHAL_DROM1_SIZE = XCHAL_DATAROM1_SIZE;  // (DEPRECATED)
  XCHAL_DRAM0_VADDR = XCHAL_DATARAM0_VADDR;  // (DEPRECATED)
  XCHAL_DRAM0_PADDR = XCHAL_DATARAM0_PADDR;  // (DEPRECATED)
  XCHAL_DRAM0_SIZE = XCHAL_DATARAM0_SIZE;  // (DEPRECATED)
  XCHAL_DRAM1_VADDR = XCHAL_DATARAM1_VADDR;  // (DEPRECATED)
  XCHAL_DRAM1_PADDR = XCHAL_DATARAM1_PADDR;  // (DEPRECATED)
  XCHAL_DRAM1_SIZE = XCHAL_DATARAM1_SIZE;  // (DEPRECATED)

  //  Default PREFCTL value to enable prefetch.
{$if defined(XCHAL_HW_MIN_VERSION) and (XCHAL_HW_MIN_VERSION < XTENSA_HWVERSION_RE_2012_0)}
  //#define XCHAL_CACHE_PREFCTL_DEFAULT  $00044  // enabled, not aggressive
  //#elif XCHAL_HW_MIN_VERSION < XTENSA_HWVERSION_RF_2014_0
  //#define XCHAL_CACHE_PREFCTL_DEFAULT  $01044  // + enable prefetch to L1
  //#elif XCHAL_PREFETCH_ENTRIES >= 16
  //#define XCHAL_CACHE_PREFCTL_DEFAULT  $81044  // 12 entries for block ops
  //#elif XCHAL_PREFETCH_ENTRIES >= 8
  //#define XCHAL_CACHE_PREFCTL_DEFAULT  $51044  // 5 entries for block ops
{$else}
  XCHAL_CACHE_PREFCTL_DEFAULT = $01044;  // 0 entries for block ops
{$endif}

{$if XCHAL_ICACHE_LINESIZE > XCHAL_DCACHE_LINESIZE}
  // define XCHAL_CACHE_LINEWIDTH_MAX  XCHAL_ICACHE_LINEWIDTH
  // define XCHAL_CACHE_LINESIZE_MAX  XCHAL_ICACHE_LINESIZE
{$else}
  // define XCHAL_CACHE_LINEWIDTH_MAX  XCHAL_DCACHE_LINEWIDTH
  // define XCHAL_CACHE_LINESIZE_MAX  XCHAL_DCACHE_LINESIZE
{$endif}

  XCHAL_ICACHE_SETSIZE = (1 shl XCHAL_ICACHE_SETWIDTH);
  XCHAL_DCACHE_SETSIZE = (1 shl XCHAL_DCACHE_SETWIDTH);
{$if XCHAL_ICACHE_SETWIDTH > XCHAL_DCACHE_SETWIDTH}
  // define XCHAL_CACHE_SETWIDTH_MAX  XCHAL_ICACHE_SETWIDTH
  // define XCHAL_CACHE_SETSIZE_MAX  XCHAL_ICACHE_SETSIZE
{$else}
  // define XCHAL_CACHE_SETWIDTH_MAX  XCHAL_DCACHE_SETWIDTH
  // define XCHAL_CACHE_SETSIZE_MAX  XCHAL_DCACHE_SETSIZE
{$endif}

  XCHAL_ICACHE_TAG_V_SHIFT = 0;
  XCHAL_ICACHE_TAG_V = $1;  // valid bit
{$if XCHAL_ICACHE_WAYS > 1}
  // define XCHAL_ICACHE_TAG_F_SHIFT  1
  // define XCHAL_ICACHE_TAG_F    $2  // fill (LRU) bit
{$else}
  // define XCHAL_ICACHE_TAG_F_SHIFT  0
  // define XCHAL_ICACHE_TAG_F    0  // no fill (LRU) bit
{$endif}
{$if XCHAL_ICACHE_LINE_LOCKABLE}
  // define XCHAL_ICACHE_TAG_L_SHIFT  (XCHAL_ICACHE_TAG_F_SHIFT+1)
  // define XCHAL_ICACHE_TAG_L    (1 shl XCHAL_ICACHE_TAG_L_SHIFT)  // lock bit
{$else}
  // define XCHAL_ICACHE_TAG_L_SHIFT  XCHAL_ICACHE_TAG_F_SHIFT
  // define XCHAL_ICACHE_TAG_L    0  // no lock bit
{$endif}

  XCHAL_DCACHE_TAG_V_SHIFT = 0;
  XCHAL_DCACHE_TAG_V = $1;  // valid bit
{$if XCHAL_DCACHE_WAYS > 1}
  // define XCHAL_DCACHE_TAG_F_SHIFT  1
  // define XCHAL_DCACHE_TAG_F    $2  // fill (LRU) bit
{$else}
  // define XCHAL_DCACHE_TAG_F_SHIFT  0
  // define XCHAL_DCACHE_TAG_F    0  // no fill (LRU) bit
{$endif}
{$if XCHAL_DCACHE_IS_WRITEBACK}
  // define XCHAL_DCACHE_TAG_D_SHIFT  (XCHAL_DCACHE_TAG_F_SHIFT+1)
  // define XCHAL_DCACHE_TAG_D    (1 shl XCHAL_DCACHE_TAG_D_SHIFT)  // dirty bit
{$else}
  // define XCHAL_DCACHE_TAG_D_SHIFT  XCHAL_DCACHE_TAG_F_SHIFT
  // define XCHAL_DCACHE_TAG_D    0  // no dirty bit
{$endif}
{$if XCHAL_DCACHE_LINE_LOCKABLE}
  // define XCHAL_DCACHE_TAG_L_SHIFT  (XCHAL_DCACHE_TAG_D_SHIFT+1)
  // define XCHAL_DCACHE_TAG_L    (1 shl XCHAL_DCACHE_TAG_L_SHIFT)  // lock bit
{$else}
  // define XCHAL_DCACHE_TAG_L_SHIFT  XCHAL_DCACHE_TAG_D_SHIFT
  // define XCHAL_DCACHE_TAG_L    0  // no lock bit
{$endif}

  //  Whether MEMCTL register has anything useful
{$define XCHAL_USE_MEMCTL := (((XCHAL_LOOP_BUFFER_SIZE > 0)  or
          XCHAL_DCACHE_IS_COHERENT or
          XCHAL_HAVE_ICACHE_DYN_WAYS or
          XCHAL_HAVE_DCACHE_DYN_WAYS)  and      \
          (XCHAL_HW_MIN_VERSION >= XTENSA_HWVERSION_RE_2012_0))}

  //  Default MEMCTL values:
{$if defined(XCHAL_HAVE_ICACHE_DYN_WAYS) or defined(XCHAL_HAVE_DCACHE_DYN_WAYS)}
  XCHAL_CACHE_MEMCTL_DEFAULT = $FFFFFF00;  // Init all possible ways
{$else}
  XCHAL_CACHE_MEMCTL_DEFAULT = $00000000;  // Nothing to do
{$endif}

{$if XCHAL_DCACHE_IS_COHERENT}
  _MEMCTL_SNOOP_EN = $02;    // Enable snoop
{$else}
  _MEMCTL_SNOOP_EN = $00;    // Don't enable snoop
{$endif}

{$if (XCHAL_LOOP_BUFFER_SIZE = 0) or defined(XCHAL_ERRATUM_453)}
  _MEMCTL_L0IBUF_EN = $00;    // No loop buffer or don't enable
{$else}
  _MEMCTL_L0IBUF_EN = $01;    // Enable loop buffer
{$endif}

  XCHAL_SNOOP_LB_MEMCTL_DEFAULT = (_MEMCTL_SNOOP_EN or _MEMCTL_L0IBUF_EN);

  //#define _XCHAL_ITLB_SET(n,_what)  XCHAL_ITLB_SET ## n ## _what
  //#define XCHAL_ITLB_SET(n,what)    _XCHAL_ITLB_SET(n, _ ## what )
  //#define _XCHAL_ITLB_SET_E(n,i,_what)  XCHAL_ITLB_SET ## n ## _E ## i ## _what
  //#define XCHAL_ITLB_SET_E(n,i,what)  _XCHAL_ITLB_SET_E(n,i, _ ## what )
  //#define _XCHAL_DTLB_SET(n,_what)  XCHAL_DTLB_SET ## n ## _what
  //#define XCHAL_DTLB_SET(n,what)    _XCHAL_DTLB_SET(n, _ ## what )
  //#define _XCHAL_DTLB_SET_E(n,i,_what)  XCHAL_DTLB_SET ## n ## _E ## i ## _what
  //#define XCHAL_DTLB_SET_E(n,i,what)  _XCHAL_DTLB_SET_E(n,i, _ ## what )


  // Cannot find definitions
  //XCHAL_ITLB_ARF_ENTRIES = (1 shl XCHAL_ITLB_ARF_ENTRIES_LOG2);
  //XCHAL_DTLB_ARF_ENTRIES = (1 shl XCHAL_DTLB_ARF_ENTRIES_LOG2);

{$if defined(XCHAL_HAVE_PTP_MMU) and not defined(XCHAL_HAVE_SPANNING_WAY)}
  //#define XCHAL_KSEG_CACHED_VADDR    $D0000000  // virt.addr of kernel RAM cached static map
  //#define XCHAL_KSEG_CACHED_PADDR    $00000000  // phys.addr of kseg_cached
  //#define XCHAL_KSEG_CACHED_SIZE    $08000000  // size in bytes of kseg_cached (assumed power of 2!!!)
  //#define XCHAL_KSEG_BYPASS_VADDR    $D8000000  // virt.addr of kernel RAM bypass (uncached) static map
  //#define XCHAL_KSEG_BYPASS_PADDR    $00000000  // phys.addr of kseg_bypass
  //#define XCHAL_KSEG_BYPASS_SIZE    $08000000  // size in bytes of kseg_bypass (assumed power of 2!!!)

  //#define XCHAL_KIO_CACHED_VADDR    $E0000000  // virt.addr of kernel I/O cached static map
  //#define XCHAL_KIO_CACHED_PADDR    $F0000000  // phys.addr of kio_cached
  //#define XCHAL_KIO_CACHED_SIZE    $10000000  // size in bytes of kio_cached (assumed power of 2!!!)
  //#define XCHAL_KIO_BYPASS_VADDR    $F0000000  // virt.addr of kernel I/O bypass (uncached) static map
  //#define XCHAL_KIO_BYPASS_PADDR    $F0000000  // phys.addr of kio_bypass
  //#define XCHAL_KIO_BYPASS_SIZE    $10000000  // size in bytes of kio_bypass (assumed power of 2!!!)

  //#define XCHAL_SEG_MAPPABLE_VADDR  $00000000  // start of largest non-static-mapped virtual addr area
  //#define XCHAL_SEG_MAPPABLE_SIZE    $D0000000  // size in bytes of  "
  // define XCHAL_SEG_MAPPABLE2_xxx if more areas present, sorted in order of descending size.
{$endif}


{$if XCHAL_INST_FETCH_WIDTH > XCHAL_DATA_WIDTH}
  // define XCHAL_ALIGN_MAX    XCHAL_INST_FETCH_WIDTH
{$else}
  // define XCHAL_ALIGN_MAX    XCHAL_DATA_WIDTH
{$endif}

  XCHAL_HW_RELEASE_MAJOR = XCHAL_HW_VERSION_MAJOR;
  XCHAL_HW_RELEASE_MINOR = XCHAL_HW_VERSION_MINOR;
  XCHAL_HW_RELEASE_NAME = XCHAL_HW_VERSION_NAME;

  XCHAL_EXTRA_SA_SIZE = XCHAL_NCP_SA_SIZE;
  XCHAL_EXTRA_SA_ALIGN = XCHAL_NCP_SA_ALIGN;
  XCHAL_CPEXTRA_SA_SIZE = XCHAL_TOTAL_SA_SIZE;
  XCHAL_CPEXTRA_SA_ALIGN = XCHAL_TOTAL_SA_ALIGN;

  //  Other default macros for undefined coprocessors:
{$ifndef XCHAL_CP0_NAME}
  // define XCHAL_CP0_NAME        0
  // define XCHAL_CP0_SA_CONTENTS_LIBDB_NUM  0
  // define XCHAL_CP0_SA_CONTENTS_LIBDB    // empty
{$endif}
{$ifndef XCHAL_CP1_NAME}
  // define XCHAL_CP1_NAME        0
  // define XCHAL_CP1_SA_CONTENTS_LIBDB_NUM  0
  // define XCHAL_CP1_SA_CONTENTS_LIBDB    // empty
{$endif}
{$ifndef XCHAL_CP2_NAME}
  // define XCHAL_CP2_NAME        0
  // define XCHAL_CP2_SA_CONTENTS_LIBDB_NUM  0
  // define XCHAL_CP2_SA_CONTENTS_LIBDB    // empty
{$endif}
{$ifndef XCHAL_CP3_NAME}
  // define XCHAL_CP3_NAME        0
  // define XCHAL_CP3_SA_CONTENTS_LIBDB_NUM  0
  // define XCHAL_CP3_SA_CONTENTS_LIBDB    // empty
{$endif}
{$ifndef XCHAL_CP4_NAME}
  // define XCHAL_CP4_NAME        0
  // define XCHAL_CP4_SA_CONTENTS_LIBDB_NUM  0
  // define XCHAL_CP4_SA_CONTENTS_LIBDB    // empty
{$endif}
{$ifndef XCHAL_CP5_NAME}
  // define XCHAL_CP5_NAME        0
  // define XCHAL_CP5_SA_CONTENTS_LIBDB_NUM  0
  // define XCHAL_CP5_SA_CONTENTS_LIBDB    // empty
{$endif}
{$ifndef XCHAL_CP6_NAME}
  // define XCHAL_CP6_NAME        0
  // define XCHAL_CP6_SA_CONTENTS_LIBDB_NUM  0
  // define XCHAL_CP6_SA_CONTENTS_LIBDB    // empty
{$endif}
{$ifndef XCHAL_CP7_NAME}
  // define XCHAL_CP7_NAME        0
  // define XCHAL_CP7_SA_CONTENTS_LIBDB_NUM  0
  // define XCHAL_CP7_SA_CONTENTS_LIBDB    // empty
{$endif}

{$if XCHAL_CP_MASK = 0}
  //  Filler info for unassigned coprocessors, to simplify arrays etc:
  //#define XCHAL_CP0_SA_SIZE               0
  //#define XCHAL_CP0_SA_ALIGN              1
  //#define XCHAL_CP1_SA_SIZE               0
  //#define XCHAL_CP1_SA_ALIGN              1
  //#define XCHAL_CP2_SA_SIZE               0
  //#define XCHAL_CP2_SA_ALIGN              1
  //#define XCHAL_CP3_SA_SIZE               0
  //#define XCHAL_CP3_SA_ALIGN              1
  //#define XCHAL_CP4_SA_SIZE               0
  //#define XCHAL_CP4_SA_ALIGN              1
  //#define XCHAL_CP5_SA_SIZE               0
  //#define XCHAL_CP5_SA_ALIGN              1
  //#define XCHAL_CP6_SA_SIZE               0
  //#define XCHAL_CP6_SA_ALIGN              1
  //#define XCHAL_CP7_SA_SIZE               0
  //#define XCHAL_CP7_SA_ALIGN              1
{$endif}


(*
//#define _XCHAL_CP_SA_SIZE(n)    XCHAL_CP ## n ## _SA_SIZE
//#define XCHAL_CP_SA_SIZE(n)    _XCHAL_CP_SA_SIZE(n)  // n = 0 .. 7
//#define _XCHAL_CP_SA_ALIGN(n)    XCHAL_CP ## n ## _SA_ALIGN
//#define XCHAL_CP_SA_ALIGN(n)    _XCHAL_CP_SA_ALIGN(n)  // n = 0 .. 7

  XCHAL_CPEXTRA_SA_SIZE_TOR2      = XCHAL_CPEXTRA_SA_SIZE;  // Tor2Beta only - do not use

{ $if !defined(_ASMLANGUAGE) and !defined(_NOCLANGUAGE) and !defined(__ASSEMBLER__)}
// define _XCJOIN(a,b)  a ## b
// define XCJOIN(a,b)  _XCJOIN(a,b)
// ifdef XCHAL_CP0_NAME
extern const unsigned char XCJOIN(Xthal_cp_id_,XCHAL_CP0_IDENT);
extern const unsigned int  XCJOIN(Xthal_cp_mask_,XCHAL_CP0_IDENT);
// endif
// ifdef XCHAL_CP1_NAME
extern const unsigned char XCJOIN(Xthal_cp_id_,XCHAL_CP1_IDENT);
extern const unsigned int  XCJOIN(Xthal_cp_mask_,XCHAL_CP1_IDENT);
// endif
// ifdef XCHAL_CP2_NAME
extern const unsigned char XCJOIN(Xthal_cp_id_,XCHAL_CP2_IDENT);
extern const unsigned int  XCJOIN(Xthal_cp_mask_,XCHAL_CP2_IDENT);
// endif
// ifdef XCHAL_CP3_NAME
extern const unsigned char XCJOIN(Xthal_cp_id_,XCHAL_CP3_IDENT);
extern const unsigned int  XCJOIN(Xthal_cp_mask_,XCHAL_CP3_IDENT);
# endif
# ifdef XCHAL_CP4_NAME
extern const unsigned char XCJOIN(Xthal_cp_id_,XCHAL_CP4_IDENT);
extern const unsigned int  XCJOIN(Xthal_cp_mask_,XCHAL_CP4_IDENT);
# endif
# ifdef XCHAL_CP5_NAME
extern const unsigned char XCJOIN(Xthal_cp_id_,XCHAL_CP5_IDENT);
extern const unsigned int  XCJOIN(Xthal_cp_mask_,XCHAL_CP5_IDENT);
# endif
# ifdef XCHAL_CP6_NAME
extern const unsigned char XCJOIN(Xthal_cp_id_,XCHAL_CP6_IDENT);
extern const unsigned int  XCJOIN(Xthal_cp_mask_,XCHAL_CP6_IDENT);
# endif
# ifdef XCHAL_CP7_NAME
extern const unsigned char XCJOIN(Xthal_cp_id_,XCHAL_CP7_IDENT);
extern const unsigned int  XCJOIN(Xthal_cp_mask_,XCHAL_CP7_IDENT);
# endif

*)


{$if defined(XCHAL_HAVE_BE)}
  XCHAL_INST_ILLN = $D60F;    // 2-byte illegal instruction, msb-first
  XCHAL_INST_ILLN_BYTE0 = $D6;  // 2-byte illegal instruction, 1st byte
  XCHAL_INST_ILLN_BYTE1 = $0F;    // 2-byte illegal instruction, 2nd byte
{$else}
  XCHAL_INST_ILLN = $F06D;    // 2-byte illegal instruction, lsb-first
  XCHAL_INST_ILLN_BYTE0 = $6D;  // 2-byte illegal instruction, 1st byte
  XCHAL_INST_ILLN_BYTE1 = $F0;    // 2-byte illegal instruction, 2nd byte
{$endif}
  //  Belongs in xtensa/hal.h:
  XTHAL_INST_ILL = $000000;  // 3-byte illegal instruction

{$if XCHAL_HW_CONFIGID_RELIABLE}
// define XCHAL_HW_RELEASE_AT_OR_BELOW(major,minor)  (XTHAL_REL_LE( XCHAL_HW_VERSION_MAJOR,XCHAL_HW_VERSION_MINOR, major,minor ) ? 1 : 0)
// define XCHAL_HW_RELEASE_AT_OR_ABOVE(major,minor)  (XTHAL_REL_GE( XCHAL_HW_VERSION_MAJOR,XCHAL_HW_VERSION_MINOR, major,minor ) ? 1 : 0)
// define XCHAL_HW_RELEASE_AT(major,minor)    (XTHAL_REL_EQ( XCHAL_HW_VERSION_MAJOR,XCHAL_HW_VERSION_MINOR, major,minor ) ? 1 : 0)
// define XCHAL_HW_RELEASE_MAJOR_AT(major)    ((XCHAL_HW_VERSION_MAJOR = (major)) ? 1 : 0)
{$else}
// define XCHAL_HW_RELEASE_AT_OR_BELOW(major,minor)  ( ((major) < 1040 and XCHAL_HAVE_XEA2) ? 0 \
//              : ((major) > 1050 and XCHAL_HAVE_XEA1) ? 1 \
//              : XTHAL_MAYBE )
// define XCHAL_HW_RELEASE_AT_OR_ABOVE(major,minor)  ( ((major) >= 2000 and XCHAL_HAVE_XEA1) ? 0 \
//              : (XTHAL_REL_LE(major,minor, 1040,0) and XCHAL_HAVE_XEA2) ? 1 \
//              : XTHAL_MAYBE )
// define XCHAL_HW_RELEASE_AT(major,minor)    ( (((major) < 1040 and XCHAL_HAVE_XEA2) or \
//                 ((major) >= 2000 and XCHAL_HAVE_XEA1)) ? 0 : XTHAL_MAYBE)
// define XCHAL_HW_RELEASE_MAJOR_AT(major)    XCHAL_HW_RELEASE_AT(major,0)
{$endif}

// TODO: Ignoring defines for errata
(*
#define XCHAL_MAYHAVE_ERRATUM_XEA1KWIN  (XCHAL_HAVE_XEA1 and \
           (XCHAL_HW_RELEASE_AT_OR_BELOW(1040,2) != 0 \
            or XCHAL_HW_RELEASE_AT(1050,0)))

{$if (  XCHAL_HW_MAX_VERSION >= XTENSA_HWVERSION_RE_2013_2 and \
  XCHAL_HW_MIN_VERSION <= XTENSA_HWVERSION_RF_2014_0 and \
  XCHAL_ICACHE_SIZE != 0    and XCHAL_HAVE_PIF //covers also AXI/AHB and \
  XCHAL_HAVE_LOOPS          and XCHAL_LOOP_BUFFER_SIZE != 0 and \
  XCHAL_CLOCK_GATING_GLOBAL and !defined(_NO_ERRATUM_453) )
#define XCHAL_ERRATUM_453  1
{$else}
#define XCHAL_ERRATUM_453  0
{$endif}

//
 *  Erratum 497 present in RE-2012.2 up to RG/RF-2015.2
 *  Applies to specific set of configuration options.
 *  Workaround is to add MEMWs after at most 8 cache WB instructions

{$if ( ((XCHAL_HW_MAX_VERSION >= XTENSA_HWVERSION_RE_2012_0 and    \
        XCHAL_HW_MIN_VERSION <= XTENSA_HWVERSION_RF_2015_2) or   \
       (XCHAL_HW_MAX_VERSION >= XTENSA_HWVERSION_RG_2015_0 and    \
        XCHAL_HW_MIN_VERSION <= XTENSA_HWVERSION_RG_2015_2)     \
      ) and \
      XCHAL_DCACHE_IS_WRITEBACK and \
      XCHAL_HAVE_AXI and \
      XCHAL_HAVE_PIF_WR_RESP and \
      XCHAL_HAVE_PIF_REQ_ATTR and  !defined(_NO_ERRATUM_497) \
    )
#define XCHAL_ERRATUM_497  1
{$else}
#define XCHAL_ERRATUM_497  0
{$endif}

//
 * Erratum 572 (releases TBD, but present in ESP32)
 * Disable zero-overhead loop buffer to prevent rare illegal instruction
 * exceptions while executing zero-overhead loops.

{$if ( XCHAL_HAVE_LOOPS and XCHAL_LOOP_BUFFER_SIZE != 0 )
#define XCHAL_ERRATUM_572   1
{$else}
#define XCHAL_ERRATUM_572   0
{$endif}
*)

implementation

end.
